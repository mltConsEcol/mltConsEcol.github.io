<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Mike Treglia</title>
    <link>https://mltconsecol.github.io</link>
    <description>Recent content in R on Mike Treglia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018. All rights reserved.</copyright>
    <lastBuildDate>Sat, 10 Feb 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Geocoding in NYC from R</title>
      <link>/post/20180210_geocodingnyc/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/20180210_geocodingnyc/</guid>
      <description>&lt;p&gt;&lt;em&gt;Edit 12 Feb 2018: Thanks to twitter I learned about being able to call GeoSearch via the &lt;a href=&#34;https://cran.r-project.org/web/packages/rmapzen/&#34;&gt;rmapzen R package&lt;/a&gt;; see the end of this post for more info.&lt;/em&gt;&lt;/p&gt;
&lt;div id=&#34;geocoding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Geocoding&lt;/h2&gt;
&lt;p&gt;In GIS and various other fields, Geocoding is a common operation. Not familar with Geocoding? Check out this great definition from &lt;a href=&#34;https://developers.google.com/maps/documentation/geocoding/start&#34;&gt;Google&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Geocoding is the process of converting addresses (like a street address) into geographic coordinates (like latitude and longitude), which you can use to place markers on a map, or position the map.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Reverse geocoding is the process of converting geographic coordinates into a human-readable address.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are lots of services that functionally do the queries and spatial overlays to get users the information they need. Lots are free, or free up to a certain number of queries, or depending on the type of use (e.g., check out the &lt;a href=&#34;https://developers.google.com/maps/documentation/geocoding/intro&#34;&gt;Google geocoding API&lt;/a&gt;, there are &lt;a href=&#34;https://www.openstreetmap.org/&#34;&gt;OpenStreetMap&lt;/a&gt; tools (e.g., &lt;a href=&#34;https://wiki.openstreetmap.org/wiki/Nominatim&#34;&gt;Nominatim&lt;/a&gt;, and there is a &lt;a href=&#34;https://developer.mapquest.com/documentation/geocoding-api/&#34;&gt;MapQuest Geocoding API&lt;/a&gt;). A tricky thing is that these often serve out the best approximations and aggregations of data for large areas, whether it be globally, nationwide, etc.&lt;/p&gt;
&lt;p&gt;An opensource geocoding project called &lt;a href=&#34;http://pelias.io/&#34;&gt;Pelias&lt;/a&gt; had been developed by the former mapping and navigation company, &lt;a href=&#34;https://mapzen.com/&#34;&gt;Mapzen&lt;/a&gt;, which was dedicated to opendata and opensource tools. Unfortunately the company &lt;a href=&#34;https://mapzen.com/blog/shutdown/&#34;&gt;shut down recently&lt;/a&gt;. However, because their tools were open source, others could pick them up and deploy them fairly readily (realizing it’s often not trivial, but if staff/expertise and infrastructure exist, it’s doable). Thus, the &lt;a href=&#34;https://planninglabs.nyc/&#34;&gt;NYC Planning Labs&lt;/a&gt; contingent of the &lt;a href=&#34;http://www1.nyc.gov/site/planning/index.page&#34;&gt;NYC Department of City Planning&lt;/a&gt; spun up an instance of Pelias, using official NYC data, currently in Beta, called &lt;a href=&#34;https://geosearch.planninglabs.nyc/&#34;&gt;GeoSearch&lt;/a&gt;. (&lt;strong&gt;Note: still being in Beta, at the time of writing, GeoSearch is noted as not yet supported by the NYC Department of City Planning&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Being in NYC, sometimes it’s helpful to have an accurate geocoding service. It’s even better if I can use it from tools I already leverage, such as R. Thus, I was curious to see if I could use the NYC GeoSearch tool from R. Here’s my coarse and quick attempt…&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;calling-on-nyc-geosearch-through-with-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Calling on NYC GeoSearch through with R&lt;/h2&gt;
&lt;p&gt;Spatial tools in R have come a long way in recent years. For this work, since it deals with vector data (points), I went right for the &lt;a href=&#34;https://cran.r-project.org/web/packages/sf/index.html&#34;&gt;sf package&lt;/a&gt;. This has been developed pretty recently (i.e., in the last few years) - if you’re using &lt;a href=&#34;https://cran.r-project.org/web/packages/sp/index.html&#34;&gt;sp&lt;/a&gt;, it’s worth a look at sf for additional speed and functionality. If you haven’t used sf it before, you can install it as you would any other package &lt;code&gt;install.packages(&amp;quot;sf&amp;quot;)&lt;/code&gt;. Then you can load the package via &lt;code&gt;library(sf)&lt;/code&gt;, or call the package explicitly (i.e., &lt;code&gt;sf::[function_name]&lt;/code&gt;) as I’ve doen below.&lt;/p&gt;
&lt;p&gt;The function st_read lets you easily read in GeoJSON data, which is what GeoSearch returns. Here’s an initial test, with the address for the Museum of the City of New York, just as a place I’ve been meaning to check out. I just followed the format from an example URL on the &lt;a href=&#34;https://geosearch.planninglabs.nyc/docs/&#34;&gt;API Docs page&lt;/a&gt;. As you’ll see, it throws an error.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sf::st_read(&amp;quot;https://geosearch.planninglabs.nyc/v1/search?text=1220 Fifth Ave, New York, NY&amp;quot;)

#GDAL Error 1: HTTP error code : 502Cannot open data source https://geosearch.planninglabs.nyc/v1/search?text=1220 Fifth Ave, New York, NY&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I remembered from some prevoius work that that spaces can cause problems when calling URLs from R. I can’t recall how I came to this conclusion, but ultimately, spaces had to be replaced with ‘%20’ per ASCII encoding. Thus, this works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sf::st_read(&amp;quot;https://geosearch.planninglabs.nyc/v1/search?text=1220%20Fifth%20Ave,%20New%20York,%20NY&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Reading layer `OGRGeoJSON&amp;#39; from data source `https://geosearch.planninglabs.nyc/v1/search?text=1220%20Fifth%20Ave,%20New%20York,%20NY&amp;#39; using driver `GeoJSON&amp;#39;
## Simple feature collection with 1 feature and 32 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -73.95187 ymin: 40.79249 xmax: -73.95187 ymax: 40.79249
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can even plot it on a quick interactive map using the &lt;a href=&#34;https://cran.r-project.org/web/packages/mapview/index.html&#34;&gt;mapview package&lt;/a&gt;. If you click on the point, you’ll see all of the tabular information that comes with the point location. Some things are related to the geocoder/geocoding process, while things prefaced by ‘pad_’ are from the &lt;a href=&#34;https://www1.nyc.gov/site/planning/data-maps/open-data.page#pad&#34;&gt;Property Address Directory&lt;/a&gt;. For example, ‘pad_bbl’ is the Borough, Block and Lot number for the property, and ‘pad_bin’ is the Building ID Number.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mapview::mapview(sf::st_read(&amp;quot;https://geosearch.planninglabs.nyc/v1/search?text=1220%20Fifth%20Ave,%20New%20York,%20NY&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Reading layer `OGRGeoJSON&amp;#39; from data source `https://geosearch.planninglabs.nyc/v1/search?text=1220%20Fifth%20Ave,%20New%20York,%20NY&amp;#39; using driver `GeoJSON&amp;#39;
## Simple feature collection with 1 feature and 32 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -73.95187 ymin: 40.79249 xmax: -73.95187 ymax: 40.79249
## epsg (SRID):    4326
## proj4string:    +proj=longlat +datum=WGS84 +no_defs&lt;/code&gt;&lt;/pre&gt;
&lt;iframe title=&#34;A single address&#34; width=&#34;600&#34; height=&#34;400&#34; src=&#34;geocodingnyc1_intmap1.html&#34; frameborder=&#34;0&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;If we can automate replacement of spaces with the %20, that is hugely helpful for dealing with any amount of addresses, given how many spaces one would encounter. A quick search yielded &lt;a href=&#34;https://stackoverflow.com/questions/40301888/replace-space-with-20-in-r/40301947#40301947&#34;&gt;this suggestion on StackOverflow&lt;/a&gt;: you can just use the ‘URLencode’ function in base R, as below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sf::st_read(URLencode(&amp;quot;https://geosearch.planninglabs.nyc/v1/search?text=1220 Fifth Ave, New York, NY&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now lets try more than one address. I’ll start by making a vector of addresses - some landmarks of NYC, including the aformentioned one. (The others are the Booklyn Museum of Art, Snug Harbor Cultural Center, and the Bronx Zoo.)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;addresses &amp;lt;- c(&amp;quot;1220 Fifth Ave, New York, NY&amp;quot;, &amp;quot;200 Eastern Pkwy, Brooklyn, NY 11238&amp;quot;, &amp;quot;1000 Richmond Terrace, Staten Island, NY 10301&amp;quot;, &amp;quot;2300 Southern Blvd, Bronx, NY 10460&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need can encode the addresses for the URL; &lt;code&gt;lapply&lt;/code&gt; is quick for this type of work, but splits the vector into a list, so the rest of the function (&lt;code&gt;do.call(rbind...&lt;/code&gt;) combines it back into a object (a matrix in this case).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;urladdresses &amp;lt;- do.call(rbind, lapply(addresses, URLencode))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can transform all of the addresses to be part of appropriate URLs, and then go through them via the lapply to import the results using &lt;code&gt;sf::st_read&lt;/code&gt;. Again, we’re using &lt;code&gt;do.call(rbind...&lt;/code&gt; to bring results back together. You’ll see the outputs of &lt;code&gt;st_read&lt;/code&gt;; if ou would rather not, you can use &lt;code&gt;sf::read_sf&lt;/code&gt; instead with the same results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;search_urls &amp;lt;- paste(&amp;quot;https://geosearch.planninglabs.nyc/v1/search?text=&amp;quot;, urladdresses, sep=&amp;quot;&amp;quot;)
geocoded_results &amp;lt;- do.call(rbind, lapply(search_urls, sf::st_read))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can inspect the resulting object using functions like &lt;code&gt;str&lt;/code&gt;, or &lt;code&gt;View&lt;/code&gt; (and you can easily see details of the resulting object). And just as before, you can use&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mapview::mapview(geocoded_results)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe title=&#34;Multiple Addresses&#34; width=&#34;600&#34; height=&#34;400&#34; src=&#34;geocodingnyc1_intmap2.html&#34; frameborder=&#34;0&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;p&gt;Interestingly, you’ll notice a bunch of points at Snug Harbor Cultural Center, which presumably share the same address, but are distinct buildings.&lt;/p&gt;
&lt;p&gt;We can put all of the above into a function too:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nycgeocode &amp;lt;- function(addresses){
  urladdresses &amp;lt;- do.call(rbind, lapply(addresses, URLencode))
  search_urls &amp;lt;- paste(&amp;quot;https://geosearch.planninglabs.nyc/v1/search?text=&amp;quot;, 
                       urladdresses, sep=&amp;quot;&amp;quot;)
  geocoded_results &amp;lt;- do.call(rbind, lapply(search_urls, sf::st_read))
  return(geocoded_results)
  }

misc_addresses &amp;lt;- nycgeocode(addresses)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;some-known-challenges-and-opportunities-for-working-with-geosearch-from-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some Known Challenges and Opportunities for working with GeoSearch from R&lt;/h2&gt;
&lt;p&gt;At this point, I’ve gone through the basics of getting addresses geocoded in R using the NYC GeoSearch API. There are challenges I haven’t quite addressed yet, but worth considering in further development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, it’s worth noting that you can Reverse Geocode too, as per some &lt;a href=&#34;https://twitter.com/chris_whong/status/961415674416517121&#34;&gt;twitter correspondence&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I experimented with a few different addresses. One in particular was the Staten Island Zoo, 614 Broadway, Staten Island, NY 10310. Surprisingly, it returned 614 Broadway locations in Brooklyn and Manhattan as well as Staten Island. A &lt;a href=&#34;https://geosearch.planninglabs.nyc/v1/search?text=614%20Broadway,%20Staten%20Island,%20NY%2010310&#34;&gt;look at the query&lt;/a&gt; indicates the borough and postal code were correctly parsed. GeoSearch does note that not all parameters in Pelias are implemented, thus it might be a limitation at this point, though I’ll be curious to dive in further. Note, users can refine searches based on things like proximity to a point, or within a bounding box. &lt;em&gt;I’m still somewhat new to APIs myself, and readily admit that I could just be missing something too&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I tried a combination of very clear and direct addresses, as above, as well as some vague ones, like “1 Vanderbilt”. Some different fields were provided/not returned for the specific queries, which caused issues in the &lt;code&gt;rbind&lt;/code&gt;. For example, with specific addresses, ‘match_type’ was a field returned that did not come back with the very vague addresses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Regardless of everything else, if the system is given a query for something fairly vague, amidst a query for more specific places, a user would need to parse through which of the options given for a vague location they were looking for. Perhaps this could be done on a map, graphically, using the &lt;a href=&#34;https://cran.r-project.org/web/packages/mapedit/index.html&#34;&gt;mapedit package&lt;/a&gt;. I don’t have another clean way of doing that, but it’s probably something that would need to be thought through if further developing this work in R.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One would probably want to include functionality to easily join the spatial results with the original addresses provided. For example, if a user has a data table with a column of addresses, along with other fields, it might be helpful to do the geocode and have a result returned with the original fields as well as lat/long, bbl, bin, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;closing-note&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Closing Note&lt;/h2&gt;
&lt;p&gt;Overall, this was an interesting exercise to spend a few hours on. I’m excited about the NYC specific geocoder, and as always in trying things out in R, I learned a thing or two. Feel free to reach out with other thoughts on this.&lt;/p&gt;
&lt;div id=&#34;additional-info-added-12-feb-2018&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;em&gt;Additional Info, added 12 Feb 2018&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Thanks to Twitter, I learned of the &lt;a href=&#34;https://cran.r-project.org/web/packages/rmapzen/&#34;&gt;rmapzen R package&lt;/a&gt;, which is already set up to use Pelias-based geocoding systems. Below is some sample code for a single address… I’ll be curious to explore this more myself. At time of writing, for application with the NYC GeoSearch system, you’ll need to use a dev-version from GitHub, as per the &lt;code&gt;install.packages&lt;/code&gt; line (commented out), which lets you use a custom api.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# devtools::install_github(&amp;quot;tarakc02/rmapzen&amp;quot;, ref = &amp;quot;devel&amp;quot;) 
library(rmapzen)

# Specify API
options(RMAPZEN_SEARCH_HOST = &amp;quot;geosearch.planninglabs.nyc&amp;quot;)

#Specify Mapzen key (NA in this case)
Sys.setenv(&amp;quot;MAPZEN_KEY&amp;quot; = NA) 

#Search
#mz_search(&amp;quot;1220 Fifth Ave, New York, NY&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting Going with Blogdown &amp; Hugo</title>
      <link>/post/20170123_blogdown_hugo/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/20170123_blogdown_hugo/</guid>
      <description>

&lt;h2 id=&#34;why-blogdown&#34;&gt;Why Blogdown?&lt;/h2&gt;

&lt;p&gt;As I&amp;rsquo;ve &lt;a href=&#34;../time-for-webpage-update/&#34;&gt;noted before&lt;/a&gt;, my previous website was pretty basic. While it was largely simple to make updates, it wasn&amp;rsquo;t particularly elegant. It was functional, and definitely looked reasonable when it was first created. Editing it wasn&amp;rsquo;t too difficult, but took some forethought if I wanted to make updates across the website. I&amp;rsquo;m not at all trained in web development, and just I picked up a few things by working off a template a friend created for me, and toying around with some .js code in leaflet maps (and lots of googling of course); thus, I might have missed some things that would have made my life a lot easier, but here I am.&lt;/p&gt;

&lt;p&gt;In the middle/end of grad school I picked up a suite of tools which I now use regularly - namely &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;R&lt;/a&gt;, &lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt; (and &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;), and &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt;, among others. The R package, &lt;a href=&#34;https://blog.rstudio.com/2017/09/11/announcing-blogdown/&#34;&gt;Blogdown&lt;/a&gt;, which was only developed in recent years, facilitates using R/R markdown/Markdown to make a better-looking website that is easier to update. Blogdown relies on &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, a static page generator that can compile markdown files with templates into full webpages.&lt;/p&gt;

&lt;p&gt;This post is intended to summarize some aspects of Blogdown, Hugo, and getting it all set up with GitHub Pages as I figured it out, as well as highlight some things I learned.&lt;/p&gt;

&lt;h2 id=&#34;getting-started-with-blogdown&#34;&gt;Getting Started with Blogdown&lt;/h2&gt;

&lt;p&gt;Thankfully, I&amp;rsquo;m far from the first person who&amp;rsquo;s used Blogdown to get a website going, and there&amp;rsquo;s even a &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;free e-book&lt;/a&gt; by &lt;a href=&#34;https://yihui.name&#34;&gt;Yihui Xie&lt;/a&gt;, &lt;a href=&#34;https://amber.rbind.io&#34;&gt;Amber Thomas&lt;/a&gt;, and &lt;a href=&#34;https://alison.rbind.io&#34;&gt;Alison Presmanes Hill&lt;/a&gt; on the topic. There are also numerous blogs, including &lt;a href=&#34;https://tclavelle.github.io/blog/blogdown_github/&#34;&gt;this one&lt;/a&gt; I&amp;rsquo;ve found useful. If you&amp;rsquo;re just getting started, definitely go through the first  chapters of the e-book and try to get something going on your local machine before getting your site online.&lt;/p&gt;

&lt;h3 id=&#34;choosing-a-hugo-theme-and-making-some-minor-changes&#34;&gt;Choosing a Hugo Theme and Making some Minor Changes&lt;/h3&gt;

&lt;p&gt;An important step in setting up your site that will be generated via Hugo is choosing a Theme - i.e., a template that you&amp;rsquo;ll adjust and feed your content into for rendering. You can think through what your needs are, and filter by different characteristics. For example, I wanted my site to be responsive, so I only looked at &lt;a href=&#34;https://themes.gohugo.io/tags/responsive/&#34;&gt;themes that were tagged as such&lt;/a&gt;. Then, I browsed through some of the demos, and saw what elements they had. Having clear links to social media pages and such seemed useful, as well as having a way to create a fairly straightforward blog. As indicated on the left panel of this page, I went with the &lt;a href=&#34;https://themes.gohugo.io/blackburn/&#34;&gt;Blackburn theme&lt;/a&gt; developed by &lt;a href=&#34;http://yoshiharuyamashita.com/&#34;&gt;Yoshiharu Yamashita&lt;/a&gt;. It was aesthetically pleasing, had fairly recent commits in the GitHub repo (indicating it is still maintained), and seemed fairly customizable.&lt;/p&gt;

&lt;p&gt;I started by following the workflow suggested in the aforementioned e-book, adjusting configuration settings (in the configuration file, &lt;em&gt;config.toml&lt;/em&gt;) that comes with the template to make sure I could adjust some things I wanted, and went from there. In particular, below is my initial code, run in &lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install packages and dependencies
install.packages(&amp;quot;blogdown&amp;quot;)
blogdown::install_hugo()
install.packages(&amp;quot;later&amp;quot;)

# Set up web project
blogdown::new_site(dir = &amp;quot;blackburnFiles&amp;quot;, #New Directory within working directory where web content will be stored
                   theme = &#39;yoshiharuyamashita/blackburn&#39;, #theme information
                   format = &#39;toml&#39;) #specify toml instead of yaml
				   
#To build and view default page
setwd(&amp;quot;blackburnFiles&amp;quot;)
blogdown::build_site()
blogdown::serve_site()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were a few particular things that I wanted to adjust in the config file - some were pretty self-explanatory and others were a matter of trial and error. Particular things I edited in the config.toml file (which can easily be done within RStudio or any text editor) are noted below, followed by the original config file with notes included after hashtags [Note: Some comments were already included]. Also, I&amp;rsquo;ll add that some of these edits might be very specific to the Blackburn theme, but I honestly haven&amp;rsquo;t done enough exploration at this point to verify. (Any quick insights are welcome.) The LiveReload functionality was handy, as every time I&amp;rsquo;d save an edit to the config.toml file, I&amp;rsquo;d see the result pretty much immediately. More details on configuration files are &lt;a href=&#34;https://bookdown.org/yihui/blogdown/configuration.html&#34;&gt;here&lt;/a&gt;; I didn&amp;rsquo;t make a ton of adjustments, mostly focusing on making it work for my immediate purposes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Brand (Blackburn -&amp;gt; MikeTreglia)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;baseurl (&amp;ldquo;&lt;a href=&#34;https://www.example.com/&amp;quot;&#34;&gt;https://www.example.com/&amp;quot;&lt;/a&gt; -&amp;gt; &amp;ldquo;&lt;a href=&#34;https://mltconsecol.github.io/&amp;quot;&#34;&gt;https://mltconsecol.github.io/&amp;quot;&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;High level page listing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I wasn&amp;rsquo;t sure where the icons next to the label came from, but from googling the code snippet preceding the name of the pages in the config file, found these were &lt;a href=&#34;http://fontawesome.io/&#34;&gt;Font Awesome&lt;/a&gt; icons You can find a whole bunch of alternatives to use as you see appropriate.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Because Font Awesome is pulling from a remote source, if you&amp;rsquo;re testing without  internet the icons will be lacking. (There are other elements in the theme that seem to rely on remote info, such as the font, so if you&amp;rsquo;re testing without internet access, don&amp;rsquo;t freak out about strange appearances yet.)&lt;/em&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Updated info for Social Media links/remove irrelevant ones. You can conveniently comment out irrelevant ones by simply prefacing them with a #.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I also updated a few other things, mostly pretty self-explanatory so I won&amp;rsquo;t go into further detail at this point.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;https://www.example.com/&amp;quot; #updated this appropriately for my own page
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;Blackburn Theme Demo&amp;quot; #Changed to the title for my site (my name))
theme = &amp;quot;blackburn&amp;quot;
author = &amp;quot;Yoshiharu Yamashita&amp;quot; #Adjusted appropriately
copyright = &amp;quot;&amp;amp;copy; 2016. All rights reserved.&amp;quot; #Changed to 2018
canonifyurls = true
paginate = 10

#This was added as per suggestion/warning in R upon build:
ignoreFiles = [&amp;quot;\\.Rmd$&amp;quot;, &amp;quot;\\.Rmarkdown$&amp;quot;, &amp;quot;_files$&amp;quot;, &amp;quot;_cache$&amp;quot;] 


[indexes]
  tag = &amp;quot;tags&amp;quot;
  topic = &amp;quot;topics&amp;quot;

[params]
  # Shown in the home page
  subtitle = &amp;quot;A Hugo Theme&amp;quot; #Updated as appropriate for my own descriptors
  brand = &amp;quot;Blackburn&amp;quot; #Brand corresponds to the &#39;MikeTreglia&#39; in the upper-left of the side-bar
  googleAnalytics = &amp;quot;Your Google Analytics tracking ID&amp;quot; #Fill this in as desired
  disqus = &amp;quot;Your Disqus shortname&amp;quot;
  # CSS name for highlight.js
  highlightjs = &amp;quot;androidstudio&amp;quot;
  dateFormat = &amp;quot;02 Jan 2006, 15:04&amp;quot; #This drives how date/time will be displayed with blog posts. I eliminated the time from mine.

#You can add/remove elements in the side menu here; weight adjusts the ordering.
[menu]
  # Shown in the side menu.
  [[menu.main]]
    name = &amp;quot;Home&amp;quot;
    pre = &amp;quot;&amp;lt;i class=&#39;fa fa-home fa-fw&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;
    weight = 1
    identifier = &amp;quot;home&amp;quot;
    url = &amp;quot;/&amp;quot;
  [[menu.main]]
    name = &amp;quot;Posts&amp;quot;
    pre = &amp;quot;&amp;lt;i class=&#39;fa fa-list fa-fw&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;
    weight = 2
    identifier = &amp;quot;post&amp;quot;
    url = &amp;quot;/post/&amp;quot;
  [[menu.main]]
    name = &amp;quot;About&amp;quot;
    pre = &amp;quot;&amp;lt;i class=&#39;fa fa-user fa-fw&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;
    weight = 3
    identifier = &amp;quot;about&amp;quot;
    url = &amp;quot;/about/&amp;quot;
  [[menu.main]]
    name = &amp;quot;Contact&amp;quot;
    pre = &amp;quot;&amp;lt;i class=&#39;fa fa-phone fa-fw&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;
    weight = 4
    url = &amp;quot;/contact/&amp;quot;
#I added a few more as you&#39;ll see here.

[social]
  # Link your social networking accouns to the side menu
  # by entering your username or ID.
  twitter = &amp;quot;*&amp;quot;
  facebook = &amp;quot;*&amp;quot;
  instagram = &amp;quot;*&amp;quot;
  github = &amp;quot;yoshiharuyamashita&amp;quot;
  stackoverflow = &amp;quot;*&amp;quot;
  linkedin = &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are still one or two things I would consider editing, which might not have been as obvious to do and simply weren&amp;rsquo;t a high priority. For example, it would be great to add, with the social media links, a link to my Google Scholar profile (likely of interest for lots of academics).&lt;/p&gt;

&lt;h3 id=&#34;editing-pages&#34;&gt;Editing Pages&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll see that in the config file that comes with the Blackburn template, the high level page listing in the side menu directs to specific folders (e.g., &amp;ldquo;/About/&amp;rdquo; for the &lt;em&gt;About&lt;/em&gt; page). However, at least when starting everything from blogdown, there is a folder within &amp;lsquo;content&amp;rsquo; called &amp;lsquo;post&amp;rsquo;, where blog posts are saved (as Markdown/R Markdown files, to be compiled on website build), but then there are simply &amp;lsquo;about.md&amp;rsquo; and &amp;lsquo;contact.md&amp;rsquo; files. For my own organization, I decided to set up folders for each main page, such that I could keep my content organized with any related files. Thus, in my &amp;lsquo;content&amp;rsquo; folder, I have folders for each relevant page, with an index.md file, and all associated files, such as images. When the site is built, all content gets organized appropriately in the &amp;lsquo;public&amp;rsquo; folder.&lt;/p&gt;

&lt;p&gt;From RStudio, there are add-ins you can use to make life a bit easier in creating new blog posts and such. These are detailed &lt;a href=&#34;https://bookdown.org/yihui/blogdown/rstudio-ide.html&#34;&gt;here&lt;/a&gt;. I&amp;rsquo;ll note that at this point, I&amp;rsquo;m just starting with new text files, filling in an appropriate yaml header (based on the template md/Rmd files) and going from there, though we&amp;rsquo;ll see how/if I adjust in the future. I definitely recommend checking out the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/output-format.html&#34;&gt;relevant section of the Blogdown book on R Markdown vs Markdown&lt;/a&gt; to better think through when you might use each in this context. And if you&amp;rsquo;re not familiar with either, definitely do some googling.&lt;/p&gt;

&lt;h3 id=&#34;hosting-on-github&#34;&gt;Hosting on Github&lt;/h3&gt;

&lt;p&gt;There are multiple ways to host a site created via blogdown, detailed in the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/deployment.html&#34;&gt;deployment&lt;/a&gt; section of the e-book. Since I already had experience with &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; and had a site there already, it made sense for me to stick with it, realizing it might not be the easiest way to host blogdown/hugo pages, and figuring I&amp;rsquo;ll learn a thing or two.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re new to github pages, you&amp;rsquo;ll need to set up a repository titled [username].github.io, add your content, and initialize the page through settings for your repo. (Lots of online resources are out there for getting started.)&lt;/p&gt;

&lt;p&gt;GitHub Pages is set up to work with another static site generator, Jekyll, but can work with Hugo-driven pages without too much trouble (or plain old html files). I give an overview of how I did things in the steps below - this is what made sense to and worked, though definitely check out the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/github-pages.html&#34;&gt;relevant section of the blogdown e-book for more&lt;/a&gt;, as well as a &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;hugo page about hosting on GitHub Pages&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set up a &lt;a href=&#34;https://github.com/mltConsEcol/WebsiteFiles&#34;&gt;repository for all of my web files, &amp;ldquo;WebsiteFiles&amp;rdquo;&lt;/a&gt;. Basically I created the repo via the GitHub website, cloned it to my local machine. I had already been testing things locally, so just copied the files created from blogdown::newsite() with the edits I made, and after using &lt;code&gt;blogdown::build_site()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I copied the contents of the &amp;lsquo;public&amp;rsquo; folder to the repository associated with GitHub Pages(mltconsecol.github.io), and deleted the contents from the &amp;lsquo;public&amp;rsquo; folder in the &amp;lsquo;WebsiteFiles&amp;rsquo; folder/repository (but leave the actual folder - just leave it empty). In the GitHub Pages repo, simply put these files in the highest level (i.e., &lt;strong&gt;do not put them in a folder within the repo called &amp;lsquo;public&amp;rsquo;&lt;/strong&gt;).

&lt;ol&gt;
&lt;li&gt;I also added a blank file called .nojekyll to the &amp;lsquo;public&amp;rsquo; folder (now in the GitHub Pages repo), which can help avoid problems of GitHub pages trying to rebuild a page via Jekyll (which won&amp;rsquo;t work, resulting in an error).&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;After pushing all of the content you just moved to your GitHub Pages repo, you can copy this content back into the WebsiteFiles/public as a git submodule. This was entirely new to me, but basically allows you to maintain a Git-tracked directory within another one. The basic git command for this is &lt;code&gt;git submodule add -b master git@github.com:[username]/[username].github.io.git public&lt;/code&gt;.

&lt;ol&gt;
&lt;li&gt;In my case, this required setting up an ssh key, which I had never done before with Git. (It also reminded me to set up two-factor authentication for GitHub - important and easy for added security.) The error I received included &amp;ldquo;&lt;code&gt;Error: Permission denied (publickey)&lt;/code&gt;.&amp;rdquo; Thankfully there are &lt;a href=&#34;https://help.github.com/articles/error-permission-denied-publickey/&#34;&gt;great docs on how to deal with this&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;As you edit your content and rebuild the site, you can commit and push your changes to your high-level folder/repository (WebsiteFiles, in my case), as well as the &lt;em&gt;public&lt;/em&gt; folder, needed for the changes to take shape on your actual website.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;other-notes&#34;&gt;Other notes&lt;/h3&gt;

&lt;p&gt;There are a few other notes worth raising before wrapping up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It&amp;rsquo;s important that users realize the themes are often times being updated through time. How should I, as somebody with a website keep up with such changes? A quick post to the &lt;a href=&#34;https://twitter.com/pjs_228/status/950095675961864194&#34;&gt;twitter-verse&lt;/a&gt; indicated to set up the theme using a git submodule framework. A quick google around this yields some useful results, such as &lt;a href=&#34;http://choomnuan.com/blog/2015/07/18/how-to-setup-hugos-theme-using-git-submodule/&#34;&gt;this post&lt;/a&gt;, among others. At this point I haven&amp;rsquo;t done this - but might be good practice for the future, or might add it&amp;rsquo;s own complexities.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you keep your files in Dropbox folders or similar and sync across multiple computers, make sure you don&amp;rsquo;t mess up your syncing! Ideally, make sure your computers are synced before making changes. This caused me some issues at some point, and I had to restore an earlier version of my work after wondering why nothing was rendering right. Because there can be a bunch of files that get re-created upon each build, it might take a minute or two for syncing to complete, depending on your content, connection, etc.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For testing purposes, I tried to simply set up the new website as a new page-enabled github repo on the same account my website is hosted from. I ended up running into some issues, in which I had problems with links to internal pages breaking, or strangely the sidebar not popping up on mobile/narrow screens. (I messed around with options to adjust the &amp;lsquo;baseurl&amp;rsquo; as seemingly appropriate and such, but never got everything working.) Thus, I ended up testing a bit more completely by running the website from another GitHub account, and didn&amp;rsquo;t actually fix the issues I was facing in running as another GitHub project. At this point I&amp;rsquo;m just saving that for another time, when an actual need comes up. I was more worried about getting this site to be functional and live, and apparently I&amp;rsquo;ve gotten there.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At this point I&amp;rsquo;ve decided to add a &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt; comments section. Googling around about disqus and hugo, it seems a lot of folks aren&amp;rsquo;t the biggest fans (see &lt;a href=&#34;https://discourse.gohugo.io/t/alternative-to-disqus-needed-more-than-ever/5516&#34;&gt;here&lt;/a&gt;). That said, as I&amp;rsquo;ve noted before, I&amp;rsquo;m interested in getting this site up and running functionally, and especially for posts like this I see functionality in having a comment section. Thus, I&amp;rsquo;ve added disqus-based comments here, realizing I can always disable it if I need. And I conveniently just stumbled upon &lt;a href=&#34;https://portfolio.peter-baumgartner.net/2017/09/10/how-to-install-disqus-on-hugo/&#34;&gt;this useful blog post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Edit, 9 Feb 2018: The rss feeds produced by default don&amp;rsquo;t pass testing via the &lt;a href=&#34;https://validator.w3.org/feed/&#34;&gt;W3C Feed Validation Service&lt;/a&gt;. Check out this blog post from the &lt;a href=&#34;https://coolbutuseless.bitbucket.io/2018/02/07/blogdown-rss-feed-of-full-articles/&#34;&gt;Cool but Useless&lt;/a&gt; blog on how to fix this. For the blackburn template I used, there was no rss.xml file in the layouts folder, so I made one using the template &lt;a href=&#34;https://gohugo.io/templates/rss/#the-embedded-rss-xml&#34;&gt;here, from  the hugo webpage&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Also - check out the &lt;a href=&#34;https://rweekly.org/&#34;&gt;RWeekly&lt;/a&gt; for a whole host of other blogs related to R.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>